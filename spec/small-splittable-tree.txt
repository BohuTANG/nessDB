Small-Splittable Tree (SST) Algorithm
-----------------------------------------
				Drafted by BohuTANG

  This is a Bε-tree implementation with small-height(level), BUT HERE, I prefer to call it Small-Splittable Tree(SST). 
  SST also using array as LEVELs, seems like COLAS(Cache Oblivious Lookahead Arrays).
  The kth LEVEL-size is BASE^k and the LEVELs are stored, COLAS's BASE is 2, SST's BASE is 8.
  The 0th LEVEL-size approximately √B(ε=1/2).

  It's very fast for random-data insertion/read, I'm sure.
  
  REFERENCES
  ==========
  [0] Michael A. Bender, Martin Farach-Colton [...]. Cache-Oblivious Streaming B-trees.
  [1] G. S. Brodal and R. Fagerberg. Lower bounds for external memory dictionaries. 

  a) Small-Splittable Tree
  =========================
	0) Small height, very performance for Random Write/Read.
	1) If height of SST is more than H, it can elegant split.
	2) Insert costs is O(logB(N)/√B).
	3) Using fractional cascading to speed up search.
	   Since SST-height is small(defaut is 4), so query is very performance(At most 4 disk accesses no matter big-data).
	  
	4) Cache-oblivious write-optimized structure.

  b) small N-height:N is small, such as 8
  =======================================
	L0: (L0-SIZE) * BASE^0
	L1: (L0-SIZE) * BASE^1
	L2: (L0-SIZE) * BASE^2
	... ...

	level structured
	================
	+------------+
	| L0(random) |
	+------------+----------+
	| L1(sorted)            |
	+------------+----------+----------+----------+
	| L2(sorted)                                  |
	+------------+----------+----------+----------+
	... ...


	file structured
	================
	+---------------+----------+-------------+------------+
	|                       header                        |
	+---------------+----------+-------------+------------+
	|  key 1 length |   key 1  | data offset | operation  |
	+---------------+----------+-------------+------------+
	|                      ... ...                        |
	+---------------+----------+-------------+------------+
	|  key N length |   key N  | data offset | operation  |
	+---------------+----------+-------------+------------+


	header structured
	==================
	+------------+-----------+-------------+
	|  L0 count  | L1 count  |   L2 count  | ... ...
	+------------+-----------+-------------+

  c) insert
  =========
     0) if all levels count is 0, insert to L0(L0 is AOF, others are sorted)
     1) if one level is full, merge it to next level

  d) lookup
  =========
     Using fractional cascading to speed up search, query cost is O(log_B N).


  e) when to split
  ================
     if ALL levels are full, scan all levels and split into  SSTs

Code is licensed with GPL. See COPYING.GPL file.
Copyright (c) 2012, BohuTANG <overred.shuttler at gmail dot com>
